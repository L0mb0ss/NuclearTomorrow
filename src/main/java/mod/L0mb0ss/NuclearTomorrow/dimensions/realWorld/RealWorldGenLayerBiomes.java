package mod.L0mb0ss.NuclearTomorrow.dimensions.realWorld;

import java.util.ArrayList;
import java.util.List;

import mod.L0mb0ss.NuclearTomorrow.init.ModBiomes;
import net.minecraft.util.WeightedRandom;
import net.minecraft.world.biome.BiomeGenBase;
import net.minecraft.world.gen.layer.GenLayer;
import net.minecraft.world.gen.layer.IntCache;
import net.minecraftforge.common.BiomeManager;
import net.minecraftforge.common.BiomeManager.BiomeEntry;

public class RealWorldGenLayerBiomes extends GenLayer {
	
	private List<BiomeEntry>[] biomes = new ArrayList[BiomeManager.BiomeType.values().length];
	private static final String __OBFID = "CL_00000555";
	
	public RealWorldGenLayerBiomes(long seed, GenLayer parent) {
		super(seed);

		this.parent = parent;

		for (BiomeManager.BiomeType type : BiomeManager.BiomeType.values())
		{
			com.google.common.collect.ImmutableList<BiomeEntry> biomesToAdd = BiomeManager.getBiomes(type);
			int idx = type.ordinal();

			if (biomes[idx] == null) biomes[idx] = new ArrayList<BiomeEntry>();
			if (biomesToAdd != null) biomes[idx].addAll(biomesToAdd);
		}

		int desertIdx = BiomeManager.BiomeType.DESERT.ordinal();

		biomes[desertIdx].add(new BiomeEntry(BiomeGenBase.desert, 30));
		biomes[desertIdx].add(new BiomeEntry(BiomeGenBase.savanna, 20));
		biomes[desertIdx].add(new BiomeEntry(BiomeGenBase.plains, 10));
	}
	
	/**
	 * Returns a list of integer values generated by this layer. These may be interpreted as temperatures, rainfall
	 * amounts, or biomeList[] indices based on the particular GenLayer subclass.
	 */
	public int[] getInts(int xPos, int zPos, int xSize, int zSize) {
		int[] inputBiomeIds = this.parent.getInts(xPos, zPos, xSize, zSize);
		int[] outputBiomeIDs = IntCache.getIntCache(xSize * zSize);

		//System.out.println("Generating biomes at " + xPos + ", " +  zPos + " - " + xSize + "*" + zSize);
		
		int realX;
		int realZ;
		double distance;
		
		for (int x = 0; x < zSize; ++x) {
			for (int z = 0; z < xSize; ++z) {
				
				this.initChunkSeed((long)(z + xPos), (long)(x + zPos));
				int nextBiomeCategoryId = inputBiomeIds[z + x * xSize];
				int l1 = (nextBiomeCategoryId & 3840) >> 8;
				boolean keepNextBiome = l1 > 0;
				nextBiomeCategoryId &= -3841;
				
				realX = x + xPos*16;
				realZ = z + zPos*16;
				distance = Math.sqrt((realX * realX) + (realZ * realZ));
				if (distance <= 50) {
					outputBiomeIDs[z + x * xSize] = ModBiomes.biomeCity.biomeID;
				} else if (isBiomeOceanic(nextBiomeCategoryId)) {
					//Ocean
					outputBiomeIDs[z + x * xSize] = nextBiomeCategoryId;
				} else if (nextBiomeCategoryId == BiomeGenBase.mushroomIsland.biomeID){
					outputBiomeIDs[z + x * xSize] = nextBiomeCategoryId;
				} else if (nextBiomeCategoryId == 1) {
					//Hot biomes
					if (keepNextBiome) {
						if (this.nextInt(3) == 0) {
							outputBiomeIDs[z + x * xSize] = BiomeGenBase.mesaPlateau.biomeID;
						} else {
							outputBiomeIDs[z + x * xSize] = BiomeGenBase.mesaPlateau_F.biomeID;
						}
					} else {
						outputBiomeIDs[z + x * xSize] = getWeightedBiomeEntry(BiomeManager.BiomeType.DESERT).biome.biomeID;
					}
				} else if (nextBiomeCategoryId == 2) {
					//Warm biomes
					if (keepNextBiome) {
						outputBiomeIDs[z + x * xSize] = BiomeGenBase.jungle.biomeID;
					} else {
						outputBiomeIDs[z + x * xSize] = getWeightedBiomeEntry(BiomeManager.BiomeType.WARM).biome.biomeID;
					}
				} else if (nextBiomeCategoryId == 3) {
					//Cool biomes
					if (keepNextBiome) {
						outputBiomeIDs[z + x * xSize] = BiomeGenBase.megaTaiga.biomeID;
					} else {
						outputBiomeIDs[z + x * xSize] = getWeightedBiomeEntry(BiomeManager.BiomeType.COOL).biome.biomeID;
					}
				} else if (nextBiomeCategoryId == 4) {
					//Cold biomes
					outputBiomeIDs[z + x * xSize] = getWeightedBiomeEntry(BiomeManager.BiomeType.ICY).biome.biomeID;
				} else {
					outputBiomeIDs[z + x * xSize] = BiomeGenBase.mushroomIsland.biomeID;
				}
			}
		}

		return outputBiomeIDs;
	}
	
	protected BiomeEntry getWeightedBiomeEntry(BiomeManager.BiomeType type) {
		List<BiomeEntry> biomeList = biomes[type.ordinal()];
		int totalWeight = WeightedRandom.getTotalWeight(biomeList);
		int weight = BiomeManager.isTypeListModded(type)?nextInt(totalWeight):nextInt(totalWeight / 10) * 10;
		return (BiomeEntry)WeightedRandom.getItem(biomeList, weight);
	}
}
